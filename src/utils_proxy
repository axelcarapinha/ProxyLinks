#!/bin/bash
# Handles proxy settings modification

source utils_general

#######################################
# ENABLE system proxy settings 
# and establish SOCKS SSH proxy connetuon
# with the server
#
# Globals:
#   VERBOSE (flag for verbose mode)
#	HOST_IP (loopback address to access the proxy)
#	HOST_PORT (port of the loopback address)
#	PROXY_VARS (proxy properties use for the code logic)
#	PROXY_PORT_IDX (index of the loopback address on the PROXY_VARS array)
#	SSH_PRIVATE_KEY_PATH
#	SERVER_USERNAME (for the proxy server)
#	SERVER_IP (or the proxy server hostname)
# 	SSH_WINDOW (interactive separate window for simultaneous server use)
# Arguments:
#	None
# Returns:
# 	Exit status
#######################################
function proxy_start() {
	[[ VERBOSE -eq 1 ]] && echo "Setting proxy..."

	# ENABLE proxy in the system settings
	if in_container; then
		export HTTP_PROXY=socks5://"$HOST_IP":"$HOST_PORT"
		export HTTPS_PROXY=socks5://"$HOST_IP":"$HOST_PORT"
	else 
		gsettings set org.gnome.system.proxy mode 'manual';
		gsettings set org.gnome.system.proxy.socks \
			${PROXY_VARS[$PROXY_PORT_IDX]} "$HOST_PORT" 
		gsettings set org.gnome.system.proxy.socks \ 
			${PROXY_VARS[$PROXY_HOST_IDX]} "$HOST_IP"
	fi 

	local readonly settings_status=$?
	if [[ "$settings_status" -ne 0 ]]; then
		log_error "Error changing the settings at proxy start" "$settings_status"
		return "$settings_status"
	fi

	# Establish the SSH tunnel
	# (can be simplified IF the credentials are in the ~/.ssh/config)
	local command="ssh "
	if [ in_container -ne 0 ]; then
		command+=" -i "$SSH_PRIVATE_KEY_PATH""
	fi
	command+=" -D "$HOST_PORT""
	if [ "$INTERACTIVE_SSH" -eq 0 ]; then
    	command+=" -N"
	fi
	command+=" -C "$SERVER_USERNAME"@"$SERVER_IP""

	if [ in_container -ne 0 ]; then
		create_terminal_tab "$command"
	else
		echo -c "$command"
	fi
	
	local readonly ssh_status=$?
	if [[ "$ssh_status" -ne 0 ]]; then
		log_error "Error when connecting via SSH to the proxy server" "$ssh_status"
		return "$ssh_status"
	fi

	return 0;
}


#######################################
# Disable system proxy settings
#
# Globals:
#   VERBOSE (verbose flag)
# Env V
# Arguments:
#	Confirmation for the reset settings option
# Returns:
# 	Exit status
#######################################
function proxy_reset() {

	exec_reset() { # the reset operation itself
		[[ VERBOSE -eq 1 ]] && echo "Resetting proxy settings..."
		if in_container; then
			unset HTTP_PROXY
			unset HTTPS_PROXY
		else 
			gsettings set org.gnome.system.proxy mode 'none'; 
			return $?
		fi 
    }

	local user_wants_reset=${1:-"-y"} # use "-n" to ask for a previous confirmation
    if [[ "$user_wants_reset" =~ -[yY] ]]; then
        exec_reset
    else 
        read -p $'\n'"Are you sure? [y/n] " answer
        if [[ "$answer" =~ [yY] ]]; then    
			exec_reset
			local readonly reset_status=$?
            if [[ reset_status -ne 0 ]]; then
				log_error "Error reseting the proxy settings." "$reset_status"
			fi
        else
			[[ VERBOSE -eq 1 ]] && echo "Did NOT reset the proxy settings." 
		fi
    fi

	return 0;
}


#######################################
# Prompts the current proxy settings of
# the system (or the environment, in the)
# container case
#
# Globals:
#	HOST_IP (loopback address to access the proxy)
#	HOST_PORT (port of the loopback address)
#	PROXY_VARS (proxy properties use for the code logic)
#
# Arguments:
# 	None	
# Outputs:
#	(System or container environment) proxy settings
#######################################
function proxy_verify_settings() {
	[[ VERBOSE -eq 1 ]] && echo "Verifying..."

	if [[ in_container || SESSION_ONLY_PROXY -eq 1 ]]; then
		echo HTTP_PROXY=socks5://"$HOST_IP":"$HOST_PORT"
		echo HTTPS_PROXY=socks5://"$HOST_IP":"$HOST_PORT"
	else 
		for property in "${PROXY_VARS[@]}"; do
			echo " $property = $(gsettings get org.gnome.system.proxy.socks "$property")"
		done
	fi 
}